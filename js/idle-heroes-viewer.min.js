/**
 * Idle Heroes Account Viewer - Simplified Version
 * For displaying mock data and handling search functionality
 */

class IdleHeroesViewer {
    constructor() {
        // Initialize properties
        this.data = null;
        this.isDemoMode = false;
        this.accountId = null;
        
        // Initialize UI elements
        this.loadingElement = document.getElementById('loading');
        this.errorElement = document.getElementById('error');
        this.errorMessageElement = document.getElementById('error-message');
        this.contentElement = document.getElementById('content');
        
        // Initialize the viewer
        this.initialize();
        
        console.log('IdleHeroesViewer initialized');
    }
    
    // Initialize and load data
    async initialize() {
        try {
            this.showLoading(true);
            
            // Get hash from URL
            const hash = window.location.hash.substring(1);
            
            // Show content section first
            this.showContent();
            
            if (!hash || hash.trim() === '') {
                console.log('No hash provided, loading demo data');
                this.loadDemoData();
                return;
            }
            
            // Load account by ID in hash
            const accountIdMatch = hash.match(/([A-Za-z]+)=([0-9]+)/);
            if (accountIdMatch && accountIdMatch.length === 3) {
                const platform = accountIdMatch[1];
                const uid = accountIdMatch[2];
                
                if (platform && uid) {
                    this.loadAccount(`${platform}=${uid}`);
                    return;
                }
            }
            
            // If hash doesn't match expected format, load demo data
            console.log('Invalid hash format, loading demo data');
            this.loadDemoData();
        } catch (err) {
            console.error('Error during initialization:', err);
            this.showError('Failed to initialize the viewer. Please try again later.');
        }
    }
    
    // Show/hide loading indicator
    showLoading(show = true) {
        if (this.loadingElement) {
            if (show) {
                this.loadingElement.classList.remove('d-none');
            } else {
                this.loadingElement.classList.add('d-none');
            }
        }
    }
    
    // Show error message
    showError(message) {
        this.showLoading(false);
        
        if (this.errorElement) {
            this.errorElement.classList.remove('d-none');
        }
        
        if (this.contentElement) {
            this.contentElement.classList.add('d-none');
        }
        
        if (this.errorMessageElement) {
            this.errorMessageElement.textContent = message;
        }
    }
    
    // Show content section
    showContent() {
        if (this.contentElement) {
            this.contentElement.classList.remove('d-none');
        }
        
        if (this.errorElement) {
            this.errorElement.classList.add('d-none');
        }
    }
    
    // Load demo data
    loadDemoData() {
        try {
            console.log('Loading demo data');
            
            // Create a demo account ID
            const platform = 'Android';
            const randomUID = Math.floor(Math.random() * 9000000) + 1000000;
            this.accountId = `${platform}=${randomUID}`;
            
            // Mark this as demo mode
            this.isDemoMode = true;
            
            // Show demo banner
            const demoBanner = document.getElementById('demo-data-banner');
            if (demoBanner) {
                demoBanner.classList.remove('d-none');
            }
            
            // Get mock data from MockDataProvider
            if (typeof MockDataProvider !== 'undefined') {
                const mockData = MockDataProvider.getMockData(platform, randomUID);
                
                if (mockData) {
                    // Decompress and display data
                    const decompressedData = DataCompressor.decompressFromUrl(mockData);
                    
                    if (decompressedData) {
                        this.data = decompressedData;
                        
                        // Update URL for sharing
                        const shareUrl = window.location.origin + window.location.pathname + '#' + this.accountId;
                        window.history.replaceState({}, document.title, shareUrl);
                        
                        // Render the data
                        this.renderData();
                        
                        // Update share URL
                        this.updateShareUrl();
                        
                        // Hide loading
                        this.showLoading(false);
                        
                        console.log('Demo data loaded successfully');
                        return;
                    }
                }
            }
            
            // If we get here, demo data couldn't be loaded
            console.error('Failed to load demo data');
            this.showError('Failed to load demo data. Please check your installation.');
        } catch (err) {
            console.error('Error loading demo data:', err);
            this.showError('Error loading demo data: ' + err.message);
        }
    }
    
    // Load account by ID (platform=uid)
    loadAccount(accountId) {
        if (!accountId) {
            console.error('No account ID provided');
            return;
        }
        
        console.log(`Loading account: ${accountId}`);
        this.showLoading(true);
        
        // Remove demo banner if exists
        const demoBanner = document.getElementById('demo-data-banner');
        if (demoBanner) {
            demoBanner.classList.add('d-none');
        }
        
        // Set account ID
        this.accountId = accountId;
        
        // In this simplified version, we'll just load mock data
        try {
            const [platform, uid] = accountId.split('=');
            
            if (platform && uid && typeof MockDataProvider !== 'undefined') {
                const mockData = MockDataProvider.getMockData(platform, uid);
                
                if (mockData) {
                    // Decompress and display data
                    const decompressedData = DataCompressor.decompressFromUrl(mockData);
                    
                    if (decompressedData) {
                        this.data = decompressedData;
                        
                        // Update URL for sharing
                        const shareUrl = window.location.origin + window.location.pathname + '#' + this.accountId;
                        window.history.replaceState({}, document.title, shareUrl);
                        
                        // Render the data
                        this.renderData();
                        
                        // Update share URL
                        this.updateShareUrl();
                        
                        // Hide loading
                        this.showLoading(false);
                        
                        console.log('Account data loaded successfully');
                        return;
                    }
                }
            }
            
            // If we get here, account data couldn't be loaded
            this.showError(`No data found for account ID: ${accountId}`);
        } catch (err) {
            console.error('Error loading account:', err);
            this.showError('Error loading account data: ' + err.message);
        }
    }
    
    // Update share URL in input field
    updateShareUrl() {
        const shareUrlInput = document.getElementById('share-url');
        if (shareUrlInput && this.accountId) {
            const shareUrl = window.location.origin + window.location.pathname + '#' + this.accountId;
            shareUrlInput.value = shareUrl;
        }
    }
    
    // Render account data to the UI
    renderData() {
        if (!this.data) {
            console.error('No data to render');
            return;
        }
        
        this.showContent();
        
        try {
            // Render user info
            this.renderUserInfo();
            
            // Render heroes
            this.renderHeroes();
            
            // Render inventory
            this.renderInventory();
            
            // Render resources
            this.renderResources();
            
            console.log('Data rendered successfully');
        } catch (err) {
            console.error('Error rendering data:', err);
            this.showError('Error rendering account data: ' + err.message);
        }
    }
    
    // Render user info
    renderUserInfo() {
        if (!this.data || !this.data.user) return;
        
        const user = this.data.user;
        
        // Update user info fields
        const elements = {
            'player-name': user.name || 'Unknown',
            'player-level': user.level || 'N/A',
            'player-uid': user.uid || 'N/A',
            'player-server': user.server || 'N/A',
            'player-platform': user.platform || 'Unknown'
        };
        
        for (const [id, value] of Object.entries(elements)) {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        }
    }
    
    // Render heroes
    renderHeroes() {
        if (!this.data || !this.data.heroes) return;
        
        const heroesContainer = document.getElementById('heroes-container');
        if (!heroesContainer) return;
        
        // Clear container
        heroesContainer.innerHTML = '';
        
        // Sort heroes by power
        const heroes = [...this.data.heroes].sort((a, b) => (b.power || 0) - (a.power || 0));
        
        // Render hero cards
        heroes.forEach(hero => {
            const heroCard = document.createElement('div');
            heroCard.className = 'col';
            heroCard.innerHTML = `
                <div class="hero-card">
                    <div class="hero-card-header">
                        <div>
                            <h5 class="hero-name">${hero.name || 'Unknown Hero'}</h5>
                            <div class="hero-faction">${hero.faction || 'Unknown'}</div>
                        </div>
                        <div class="hero-stars">${'★'.repeat(hero.stars || 0)}</div>
                    </div>
                    <div class="hero-card-body">
                        <div class="row align-items-center mb-3">
                            <div class="col-6">
                                <div class="hero-stats-label">Level</div>
                                <div>${hero.level || 0}</div>
                            </div>
                            <div class="col-6">
                                <div class="hero-stats-label">Power</div>
                                <div>${this.formatNumber(hero.power) || 0}</div>
                            </div>
                        </div>
                        ${hero.isTranscendence ? '<div class="hero-transcendence-badge">Transcendence</div>' : ''}
                        ${hero.isEvolved ? `<div class="hero-evolved-badge">Evolution ${hero.evolutionLevel || 1}</div>` : ''}
                        ${hero.stone ? `<div class="hero-stone mt-2">Stone: ${hero.stone}</div>` : ''}
                        ${hero.artifact ? `<div class="hero-artifact mt-1">Artifact: ${hero.artifact}</div>` : ''}
                    </div>
                </div>
            `;
            
            heroesContainer.appendChild(heroCard);
        });
    }
    
    // Render inventory
    renderInventory() {
        if (!this.data || !this.data.inventory) return;
        
        const inventoryContainer = document.getElementById('inventory-container');
        if (!inventoryContainer) return;
        
        // Clear container
        inventoryContainer.innerHTML = '';
        
        // Sort inventory by count
        const inventory = [...this.data.inventory].sort((a, b) => (b.count || 0) - (a.count || 0));
        
        // Render item cards
        inventory.forEach(item => {
            const itemCard = document.createElement('div');
            itemCard.className = 'col';
            itemCard.innerHTML = `
                <div class="item-card">
                    <h5 class="item-name">${item.name || 'Unknown Item'}</h5>
                    <div class="item-type badge bg-secondary mb-2">${item.type || 'Item'}</div>
                    <div class="item-count">${this.formatNumber(item.count) || 0}</div>
                </div>
            `;
            
            inventoryContainer.appendChild(itemCard);
        });
    }
    
    // Render resources
    renderResources() {
        if (!this.data || !this.data.resources) return;
        
        const resources = this.data.resources;
        
        // Update resource values
        const elements = {
            'gold-value': resources.gold || 0,
            'gems-value': resources.gems || 0,
            'spirit-value': resources.spirit || 0,
            'promotion-stones-value': resources.promotion_stones || 0
        };
        
        for (const [id, value] of Object.entries(elements)) {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = this.formatNumber(value);
            }
        }
        
        // Render other resources
        const otherResourcesContainer = document.getElementById('other-resources');
        if (otherResourcesContainer) {
            otherResourcesContainer.innerHTML = '';
            
            // Add other resources
            const otherResources = {
                celestial_island_stones: 'Celestial Island Stones',
                dust: 'Magic Dust',
                void_material: 'Void Material',
                transcendence_material: 'Transcendence Material'
            };
            
            for (const [key, label] of Object.entries(otherResources)) {
                if (resources[key]) {
                    const resourceDiv = document.createElement('div');
                    resourceDiv.className = 'account-detail';
                    resourceDiv.innerHTML = `
                        <div class="account-label">${label}:</div>
                        <div class="account-value">${this.formatNumber(resources[key])}</div>
                    `;
                    
                    otherResourcesContainer.appendChild(resourceDiv);
                }
            }
        }
    }
    
    // Format number with commas
    formatNumber(num) {
        if (num === undefined || num === null) return '0';
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
}

// Initialize when document is ready
document.addEventListener('DOMContentLoaded', () => {
    window.viewer = new IdleHeroesViewer();
    
    // Set up copy button
    const copyBtn = document.getElementById('copy-url-btn');
    if (copyBtn) {
        copyBtn.addEventListener('click', () => {
            const shareUrl = document.getElementById('share-url');
            if (shareUrl) {
                navigator.clipboard.writeText(shareUrl.value)
                    .then(() => {
                        const originalText = copyBtn.innerHTML;
                        copyBtn.innerHTML = '<i class="bi bi-check"></i> Copied!';
                        setTimeout(() => {
                            copyBtn.innerHTML = originalText;
                        }, 2000);
                    })
                    .catch(err => console.error('Could not copy text: ', err));
            }
        });
    }
    
    // Set up account search form
    const searchForm = document.getElementById('account-search-form');
    if (searchForm) {
        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const platformSelect = document.getElementById('account-platform');
            const uidInput = document.getElementById('account-uid');
            
            if (platformSelect && uidInput && window.viewer) {
                const platform = platformSelect.value;
                const uid = uidInput.value.trim();
                
                if (platform && uid) {
                    console.log(`Searching for account: ${platform}=${uid}`);
                    
                    // Construct account identifier
                    const accountId = `${platform}=${uid}`;
                    
                    // Update URL with the new hash
                    window.location.hash = accountId;
                    
                    // Reload the viewer with the new account
                    window.viewer.loadAccount(accountId);
                } else {
                    alert('Please select a platform and enter a valid UID');
                }
            }
        });
    }
});
